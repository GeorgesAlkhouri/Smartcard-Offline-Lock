package queue;

import javacard.framework.APDU;
import javacard.framework.Applet;
import javacard.framework.ISO7816;
import javacard.framework.ISOException;

public class Queue extends Applet {
	/* Variablen der Datenstruktur : */
	public Object[] q; // kein Object auf Smartcards
	public int first;
	public int firstfree;
	public int maxcap;
	public int cap; /* "verbleibende Kapazitaet" */

	public static void install(byte[] bArray, short bOffset, byte bLength) {
		// GP-compliant JavaCard applet registration
		new Queue().register(bArray, (short) (bOffset + 1), bArray[bOffset]);
	}

	public void process(APDU apdu) {
		// Good practice: Return 9000 on SELECT
		if (selectingApplet()) {
			return;
		}

		byte[] buf = apdu.getBuffer();
		switch (buf[ISO7816.OFFSET_INS]) {
		case (byte) 0x00:
			break;
		default:
			// good practice: If you don't know the INStruction, say so:
			ISOException.throwIt(ISO7816.SW_INS_NOT_SUPPORTED);
		}
	}
	
	public Queue(int cap0) {
		q = new Object[cap0];
		cap = cap0;
		maxcap = cap0;
		first = 0;
		firstfree = 0;
	}

	public boolean empty() {
		return (cap == maxcap);
	}

	public int cap() {
		return cap;
	}

	public boolean full() {
		return (cap == 0);
	}

	public Object head() {
		if (cap != maxcap)
			return q[first];
		else
			return null;
	}

	public Queue dequeue() {
		if (cap != maxcap) {
			q[first] = null;
			first = (first + 1) % maxcap;
			cap = cap + 1;
		}
		return this;
	}

	public Queue add(Object ne) {
		if (cap != 0) {
			q[firstfree] = ne;
			firstfree = (firstfree + 1) % maxcap;
			cap = cap - 1;
		}
		return this;
	}

}
